{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"01.2 Números - Sobre la coma flotante y otras curiosidades","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"NNPb1MXWrziF","colab_type":"text"},"cell_type":"markdown","source":["## Coma flotante en binario\n","\n","Una forma habitual de trabajar con números con decimales es la notación científica de forma que todos los números quedan reducidos a una cifra entera seguida por todos los decimales y luego una potencia de 10\n","\n",">$ 157,2345 = 1,572345 · 10^2 \\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\, 0,002345 = 2,345 · 10^{-2}$\n","\n","Este método que utilizan los procesadores para almacenar los números con decimales. Pero se añade un paso, antes de hacer la conversión a notación científica se hace la conversión a binario. Para 157,2345 sería algo así (los detalles no importan y se encuentran en [internet](https://youtu.be/RT89h-oko70))\n","\n",">$ 157,2345 \\approx 10011101,001111 $\n","\n","Si se pasa a notación científica\n"," >$ 1,0011101001111 · 2^7 $\n","\n","Como el entero inicial siempre va a ser uno, basta con almacenar el número de detras de la coma (_mantisa_) y el 7(_exponente_) y ya se tiene un número con decimales.\n","\n","Esto se hace decidiendo el número de bits que se usarán. Así las dos formas habituales hoy para precisiones de 32 y 64 bits son:\n","\n","| Formato\t| Bits totales\t| Bits significativos\t| Bits del exponente\t| Número más pequeño\t| Número más grande |\n","|---|---|---|---|---|---|\n","| Precisión sencilla\t| 32\t| 23 + 1 signo\t| 8\t| $≃1.2 ⋅ 10^{-38}$\t| $≃3.4 ⋅ 10^{38}$ |\n","| Precisión doble\t| 64\t| 52 + 1 signo\t| 11\t| $ ≃5.0 ⋅ 10^{-324}\t| ≃1.8 ⋅ 10^{308} | \n","\n"]},{"metadata":{"id":"HSuECWvyrubF","colab_type":"text"},"cell_type":"markdown","source":["## Una forma de evitar las imprecisiones de Float\n","\n","Evitar este tipo de imprecisiones puede conseguirse si se trabaja con la [coma fija](https://es.wikipedia.org/wiki/Coma_fija) lo que se logra con el módulo [decimal](https://docs.python.org/3.7/library/decimal.html). Si imprimimos su contexto vemos la precisión máxima con la que trabajar (número de decimales) por defecto en nuestro caso en 28. Esto puede cambiarse."]},{"metadata":{"id":"Iod2HhZWrxuf","colab_type":"code","outputId":"bd808968-7194-4ebc-9bfd-a681eccc0114","executionInfo":{"status":"ok","timestamp":1553247007678,"user_tz":-60,"elapsed":699,"user":{"displayName":"Ramón Maldonado Rodríguez","photoUrl":"https://lh3.googleusercontent.com/-ljH7hLMa7no/AAAAAAAAAAI/AAAAAAAAAAg/pf-fwlCU1Eg/s64/photo.jpg","userId":"17580681743975451950"}},"colab":{"base_uri":"https://localhost:8080/","height":163}},"cell_type":"code","source":["from decimal import *\n","print(getcontext())\n","\n","A = 0.1\n","B = 0.2\n","C = A + B\n","print(A)\n","print(B)\n","print(C)\n","\n","a = Decimal('0.1')\n","b = Decimal('0.2')\n","c = a + b\n","\n","print(a)\n","print(b)\n","print(c)\n"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999, capitals=1, clamp=0, flags=[], traps=[InvalidOperation, DivisionByZero, Overflow])\n","0.1\n","0.2\n","0.30000000000000004\n","0.1\n","0.2\n","0.3\n"],"name":"stdout"}]},{"metadata":{"id":"hl7SnYIJvM2W","colab_type":"text"},"cell_type":"markdown","source":["Otro ejemplo para ver el tema de la precisión. Vemos que en este caso redondea correctamente el último decimal"]},{"metadata":{"id":"fXkV4vekuSo0","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":53},"outputId":"6e729a9e-8273-4ace-f9c1-800bca14fc18","executionInfo":{"status":"ok","timestamp":1553247142699,"user_tz":-60,"elapsed":682,"user":{"displayName":"Ramón Maldonado Rodríguez","photoUrl":"https://lh3.googleusercontent.com/-ljH7hLMa7no/AAAAAAAAAAI/AAAAAAAAAAg/pf-fwlCU1Eg/s64/photo.jpg","userId":"17580681743975451950"}}},"cell_type":"code","source":["uno = Decimal(1)\n","siete = Decimal(7)\n","getcontext().prec = 8\n","\n","un_septimo = uno/ siete\n","print(un_septimo)\n","\n","getcontext().prec = 28\n","\n","un_septimo = uno/ siete\n","print(un_septimo)\n"],"execution_count":6,"outputs":[{"output_type":"stream","text":["0.14285714\n","0.1428571428571428571428571429\n"],"name":"stdout"}]},{"metadata":{"id":"1fPo9l74uWB9","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}